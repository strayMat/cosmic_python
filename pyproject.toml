[tool.poetry]
name = "cosmic_python"
version = "0.0.0"
description = "Cosmic_Python"
authors = ["Matthieu Doutreligne <matt.dout@gmail.com>"]
license = "EUPL-v1.2"
readme = "README.md"
repository = "https://github.com/strayMat/cosmic_python"
homepage = "https://github.com/strayMat/cosmic_python"
include = ["bin"]
keywords = []
classifiers = [
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

# [tool.poetry.urls]
# Changelog = "https://github.com/strayMat/cosmic_python/releases"

[tool.poetry.dependencies]
python = "^3.10"

# Project-Specific
python-dotenv = "^0.20.0"
ruff = "^0.4.3"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.1.1"
pytest-cov = "^3.0.0"
pytest-mock = "^3.7.0"
pytest-sugar = "^0.9.4"
# Décommenter pour avoir des tests parallèles
# pytest-xdist = "^2.5.0"
# Linting
## Type Checking and Data Validation
mypy = "^0.942" # Static type checker
## Code formatting
## Detect secrets
detect-secrets = "^1.4.0"
## Security Issues
bandit = "^1.7.4"
## Doc string
interrogate = "^1.5.0"
## Automation and management
pre-commit = "^2.17.0"
## Upgrade syntax for newer versions of Python
pyupgrade = "^3.3.1"
## Linter for YAML files
yamllint = "1.29.0"
## various convenient hooks
pre-commit-hooks = "^4.4.0"

#################################################################################
# Tooling configs                                                               #
#################################################################################
[tool.bandit]
exclude_dirs = ["tests/", ".*$"]


[tool.coverage.run]
branch = true
concurrency = ["multiprocessing"]
parallel = true
source = ["cosmic_python"]

[tool.coverage.report]
exclude_lines =[
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
fail_under = 70
show_missing = true
skip_covered = true

[tool.interrogate]
verbose = 0
quiet = false
fail-under = 0
color = true

[tool.mypy]
disallow_untyped_defs = false
files = ["cosmic_python/*.py","bin/*.py"]
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_context = true
show_error_codes = true

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
# Same as Black.
line-length = 88
indent-width = 4
# Assume Python 3.8
target-version = "py310"
[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false
# Set the line length limit used when formatting code snippets in
# docstrings.
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.cruft]
skip = [
    ".git",
    "README.md",
]
[tool.pytest.ini_options]
addopts = ["-rfsxX", "-l", "--tb=short", "--strict-markers", "-vv"]

xfail_strict = "true"
testpaths = ["tests",]
norecursedirs = [".*", "*.egg", "build", "dist",]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
